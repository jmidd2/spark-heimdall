name: Build Release Binaries

on:
  pull_request:
    branches:
      - main
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"
    types:
      - closed
  push:
    branches:
      - main
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"

jobs:
  # Skip the build job if this is not a tag push
  check_tag:
    runs-on: ubuntu-latest
    outputs:
      is_tag: ${{ startsWith(github.ref, 'refs/tags/v') }}
    steps:
      - name: Check if tag push
        run: echo "Running tag check"

  build:
    name: Build Release Assets
    needs: check_tag
    # Only run this job if the commit is tagged
    if: needs.check_tag.outputs.is_tag == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os:
          - linux
          - darwin
        arch:
          - amd64
          - arm64
        include:
          - os: windows
            arch: amd64

    env:
      GOOS: ${{ matrix.os }}
      GOARCH: ${{ matrix.arch }}
      TAG: ${{ github.ref_name }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Just
        uses: extractions/setup-just@v3
        with:
          just-version: 1.40.0

      - name: Set up Go
        uses: actions/setup-go@v1
        with:
          go-version: 1.24

      - name: Display the version of go that we have installed
        run: go version

      - name: Display the release tag
        run: echo "$TAG"

      - name: Build binaries
        run: |
          mkdir -p dist
          if [ "$GOOS" = "windows" ]; then
            just build-windows $GOARCH
          else
            just build-unix $GOOS $GOARCH $TAG
          fi

      - uses: actions/upload-artifact@v4
        with:
          name: spark-heimdall-${{ env.GOOS }}-${{ env.GOARCH }}
          path: |
            ./dist/**/*

  release:
    needs: [check_tag, build]
    if: needs.check_tag.outputs.is_tag == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Required for generating release notes

      - uses: actions/download-artifact@v4
      
      - name: Download Artifacts
        run: ls -R
      
      - name: Generate Release Body
        id: release_body
        run: |
          cat > release_body.md << EOL
          # Heimdall ${GITHUB_REF_NAME} Release

          ## Overview
          Heimdall is a web-based remote desktop connection manager that supports VNC and RDP protocols.

          ## Installation

          ### Binary Downloads
          Pre-built binaries are available for:
          - Windows (64-bit)
          - Linux (64-bit, ARM64)
          - macOS (Intel, Apple Silicon)

          ### Quick Start
          1. Download the appropriate binary for your platform
          2. Make the file executable (Linux/macOS): \`chmod +x heimdall-*\`
          3. Run the application: \`./heimdall-*\`
          4. Access the web interface at \`http://localhost:8080\`

          ## Configuration
          See our [README](https://github.com/yourusername/spark-heimdall#configuration) for configuration options and details.

          ## Changes
          EOL
          
          # Get changes since the previous tag and append them to the release body
          git log --pretty=format:"- %s" $(git describe --tags --abbrev=0 ${GITHUB_REF_NAME}^ 2>/dev/null || echo HEAD^)..${GITHUB_REF_NAME} | grep -E "^- (feat|fix|docs|perf)(\([^)]+\))?:" >> release_body.md || echo "- First release" >> release_body.md
      
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          prerelease: true
          name: ${{ github.ref_name }}
          body_path: release_body.md
          files: |
            ./spark-heimdall-windows-amd64/*
            ./spark-heimdall-linux-amd64/*
            ./spark-heimdall-linux-arm64/*
            ./spark-heimdall-darwin-amd64/*
            ./spark-heimdall-darwin-arm64/*
